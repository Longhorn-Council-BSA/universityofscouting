<%- include header %>
  <div class="container main-body">
    <div class="row">
      <div class="col"></div>
      <div class="col-5 text-center">
        <!-- Transcript download/print options -->
        <button type="button" id="btnExportToCsv" class="btn btn-sm btn-3 noprint">Download CSV</button>
        <!-- <button onclick="downloadPDF()" class="btn btn-sm btn-3 noprint disabled" style="cursor: not-allowed;" disabled>Download PDF</button> -->
        <button id="printBTN" onclick="print()" class="btn btn-sm btn-3 noprint">Print</button>
        <span class="printTip" id="printTip"><strong>Tool-Tip:<br/></strong>To save your Transcript on your computer you can Print to PDF!<br/><br/><span class="ClickHere" onClick="howToPopup()">Click here for instructions!</span></a></span>
      </div>
      <div class="col">
      </div>
    </div>
    <!-- Variables for print screen -->
    <div class="row">
      <div class="col text-center noprint" style="font-weight: bold; margin-top: 10px;">
        Member ID: <span id="userID"><%= user.memberID %></span> | 
        <span id="fname"><%= user.firstName %></span> <span id="lname"><%= user.lastName %></span> | 
        <span id="rowCount"><%= transcript.length %></span> Records
        <div id="transcriptTableDiv" style="font-weight: normal;">
          <table id="transcriptTable" class="mx-auto table table-hover table-sm transcript text-center sortable">
            <thead class="thead-dark">
              <th>Course Date</th>
              <th>Course Title</th>
              <th>Credits</th>
              <th>Status</th>
            </thead>
            <tbody>
              <% for(var i=0; i<transcript.length; i++) {  %>
              <tr>
                <td><%= transcript[i].date %></td>
                <td><%= transcript[i].title %></td>
                <td><%= transcript[i].credits %></td>
                <td><%= transcript[i].status %></td>
              </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
<script>
//******Open print friendly window // Print as PDF******//  
  function print() {
    var win = window.open('/transcriptPrint', '', 'height=800, width=1000'); 
    win.document.close(); 
    win.print(); 
  }
  //***Tooltop Popup for HowTo****//
$("#printBTN").mouseenter(function() {
  $(".printTip").fadeIn("fast");
  hideTimer = setTimeout(function(){ $(".printTip").fadeOut();}, 4000);
});
$(".printTip").mouseenter(function() {
  clearTimeout(hideTimer);
  clearTimeout(hideTimer);
  clearTimeout(hideTimer);
});
$(".printTip").mouseleave(function() {
  $(".printTip").fadeOut();
});
//*********HowTo popup********//
function howToPopup(){
  var popup = window.open('/howtoprinttopdf', '', 'height=800, width=600');
  popup.document.close();
}
//******Download Transcript CSV file******//  
  const dataTable = document.getElementById("transcriptTable");
  const btnExportToCsv = document.getElementById("btnExportToCsv");
  var fname = document.getElementById('fname').innerHTML;
  var lname = document.getElementById('lname').innerHTML;
  var user = fname+" "+lname;
  btnExportToCsv.addEventListener("click", () => {
      const exporter = new TableCSVExporter(dataTable);
      const csvOutput = exporter.convertToCSV();
      const csvBlob = new Blob([csvOutput], { type: "text/csv" });
      const blobUrl = URL.createObjectURL(csvBlob);
      const anchorElement = document.createElement("a");
      anchorElement.href = blobUrl;
      anchorElement.download = "University of Scouting Transcript - "+user+".csv";
      anchorElement.click();
      setTimeout(() => {
          URL.revokeObjectURL(blobUrl);
      }, 500);
  });
  class TableCSVExporter {
    constructor (table, includeHeaders = true) {
        this.table = table;
        this.rows = Array.from(table.querySelectorAll("tr"));
        if (!includeHeaders && this.rows[0].querySelectorAll("th").length) {
            this.rows.shift();
        }
    }
    convertToCSV () {
        const lines = [];
        const numCols = this._findLongestRowLength();
        for (const row of this.rows) {
            let line = "";
            for (let i = 0; i < numCols; i++) {
                if (row.children[i] !== undefined) {
                    line += TableCSVExporter.parseCell(row.children[i]);
                }
                line += (i !== (numCols - 1)) ? "," : "";
            }
            lines.push(line);
        }
        return lines.join("\n");
    }
    _findLongestRowLength () {
        return this.rows.reduce((l, row) => row.childElementCount > l ? row.childElementCount : l, 0);
    }
    static parseCell (tableCell) {
        let parsedValue = tableCell.textContent;
        // Replace all double quotes with two double quotes
        parsedValue = parsedValue.replace(/"/g, `""`);
        // If value contains comma, new-line or double-quote, enclose in double quotes
        parsedValue = /[",\n]/.test(parsedValue) ? `"${parsedValue}"` : parsedValue;
        return parsedValue;
    }
}
</script>
<%- include footer %>